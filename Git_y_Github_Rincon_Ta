1. ¿Quién inventó el sistema de control de versión Git y por qué?

Git es un sistema de control de versiones distribuido que fue creado por Linus Torvalds en 2005 para ser utilizado en el desarrollo del kernel de Linux. 
Git es un software escrito en C, con interfaz por línea de comandos, disponible para Windows, MacOS X y GNU/Linux. En la actualidad, existen además multitud 
de clientes gráficos y herramientas basadas en git. A grandes rasgos, un sistema de control de versiones o sistema de gestión del código fuente (SCM, Source Code Management), 
es un software que permite registrar todos los cambios realizados en el código fuente de un proyecto, de forma que sea sencillo comparar diferentes versiones del mismo, 
recuperar versiones anteriores y, en general, permitir que una o varias personas desarrollen un mismo proyecto de forma efectiva.
La palabra clave cuando se describen las características de git, tal y como le gusta subrayar al propio Linus, es distribuido. Esto significa que en git, a diferencia de los 
sistemas de control de versiones centralizados, no es necesario que exista un repositorio central. Cada desarrollador dispone de una copia del repositorio 
con la historia completa del mismo y puede realizar en él todas las modificaciones que desee. Dichas modificaciones pueden ser posteriormente compartidas e incorporadas en los 
repositorios de otros desarrolladores. Este modo de funcionamiento permite eliminar la problemática que se presenta en los sistemas centralizados de decidir quién puede hacer 
cambios en el repositorio. Este modo de funcionamiento distribuido, tal y como ha explicado el propio Linus Torvalds en repetidas ocasiones, era un requisito indispensable para 
el desarrollo del kernel de Linux, uno de los proyectos de código abierto más grandes del mundo en el que participan cientos de desarrolladores.

Originalmente, la comunidad de desarrolladores de Linux utilizaba BitKeeper, un sistema de control de versiones distribuido y comercial, aunque gratuito para proyectos de 
código abierto. Como el propio Linus Torvalds explica, BitKeeper suponía un gran paso adelante comparado con otros SCMs como CVS y Subversion y, sin duda, inspiró muchos de 
los conceptos en los que se basa git (especialmente el ser un sistema distribuido). Sin embargo, el hecho de ser un software propietario y ciertas faltas de entendimiento con 
su creador, Larry McVoy, llevaron a Linus Torvalds a decantarse por buscar un nuevo sistema de control de versiones. Tras probar muchas de las soluciones existentes y descubrir 
que ninguna cumplía con sus requisitos, Torvalds decidió diseñar e implementar su propio sistema de control de versiones. Tan sólo un día después ya había desarrollado las bases 
de git para poder auto-gestionar el propio código de git en git y, una semana después, ya tenía una primera versión. Git fue diseñado por Torvalds con el proyecto de Linux y el 
workflow  de sus desarrolladores en mente y, obviamente, estos fueron los primeros en adoptarlo como sistema de control de versiones. El modo de funcionamiento distribuido, 
su eficiencia a la hora de trabajar con múltiples ramas y otras operaciones comunes, dan testimonio de cómo git fue diseñado con la intención de gestionar proyectos grandes como 
el kernel sin problemas.

[Información extraída de la página web: "https://www.conasa.es/blog/git-10-anos-controlando-versiones/#:~:text=Git%20es%20un%20sistema%20de,desarrollo%20del%20kernel%20de%20Linux."]


2. ¿A quién pertenece actualmente Github y por qué?

Actualmente, GitHub pertenece Microsoft, quien se lo compró a Linux en 2018. Hace tiempo que Microsof está apostando por el desarrollo del software de código abierto 
(en inglés open source software u OSS), es el software cuyo código fuente y otros derechos que normalmente son exclusivos para quienes poseen los derechos de autor, son 
publicados bajo una licencia de código abierto o forman parte del dominio público. GitHub es el mayor repositorio de código del mundo y es punto de encuentro para 
millones de desarrolladores, y esa es precisamente la clave. Con el control de GitHub, Microsoft se hace también con la comunidad de desarrollo más nutrida del planeta.
A modo de ejemplo, según la propia GitHub, nada menos que 27 millones de usuarios, y aunque parte de ellos son 'voyeurs' de código y no programadores como tales, este 
megarepositorio de código se ha convertido en referente para 80 millones de proyectos (repositorios) Open Source de distinta entidad. El crecimiento de GitHub lo ha convertido 
en referente incluso para proyectos que no son específicamente de código, y allí nos encontramos con proyectos que se encargan de gestionar versiones de canciones, recetas o 
tipografías, así como guías y listas colaborativas. Y aunque es célebre por su gestión de proyectos de código abierto, la propia Microsoft lo ha utilizado como sistema de 
control de versiones para su código propietario, y es que en GitHub también caben esos proyectos "no-OpenSource".
En conclusión, Microsoft se adueñó de un empresa altamente valorada en el mundo del desarrollo y muy utilizada para seguir creciendo y mejorando sus alcances en el mundo del
desarrollo, y también del software open source.

[Información extraída de la página web: "https://www.xataka.com/aplicaciones/microsoft-punto-adquirir-github-desarrolladores-desarrolladores-desarrolladores"]


3. ¿Hay otra forma que no sea la terminal para trabajar con Github?

Entiendo que además de la terminal con líneas de comando, se puede trabajar con GitHub de forma gráfica, existen herramientas en su página web para llevar a cabo las mismas 
funciones que desde la terminal, e incluso se puede descargar "GitHub Desktop" para facilitar estas interacciones. Por otra parte el Visual Studio Code también permite 
interactuar con el repositorio en la nube desde su interfaz gráfica. La verdad que la experiencia de usuario que he tenido hasta el momento es muy buena, realmente git y 
GitHub son herramientas muy eficientes, efectivas y user-friendly a la hora de interactuar con las mismas. 
